// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/23/2024 01:40:44"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    DSS
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DSS_vlg_sample_tst(
	clkin,
	data_port_A,
	sampler_tx
);
input  clkin;
input [4:0] data_port_A;
output sampler_tx;

reg sample;
time current_time;
always @(clkin or data_port_A)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module DSS_vlg_check_tst (
	ASK_OUT,
	LFSR_BUS,
	LFSR_OUTPUT,
	LUT_OUT,
	PA_out,
	sampler_rx
);
input [7:0] ASK_OUT;
input [8:0] LFSR_BUS;
input  LFSR_OUTPUT;
input [7:0] LUT_OUT;
input [4:0] PA_out;
input sampler_rx;

reg [7:0] ASK_OUT_expected;
reg [8:0] LFSR_BUS_expected;
reg  LFSR_OUTPUT_expected;
reg [7:0] LUT_OUT_expected;
reg [4:0] PA_out_expected;

reg [7:0] ASK_OUT_prev;
reg [8:0] LFSR_BUS_prev;
reg  LFSR_OUTPUT_prev;
reg [7:0] LUT_OUT_prev;
reg [4:0] PA_out_prev;

reg [7:0] ASK_OUT_expected_prev;
reg [7:0] LUT_OUT_expected_prev;

reg [7:0] last_ASK_OUT_exp;
reg [7:0] last_LUT_OUT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	ASK_OUT_prev = ASK_OUT;
	LFSR_BUS_prev = LFSR_BUS;
	LFSR_OUTPUT_prev = LFSR_OUTPUT;
	LUT_OUT_prev = LUT_OUT;
	PA_out_prev = PA_out;
end

// update expected /o prevs

always @(trigger)
begin
	ASK_OUT_expected_prev = ASK_OUT_expected;
	LUT_OUT_expected_prev = LUT_OUT_expected;
end


// expected ASK_OUT[ 7 ]
initial
begin
	ASK_OUT_expected[7] = 1'bX;
end 
// expected ASK_OUT[ 6 ]
initial
begin
	ASK_OUT_expected[6] = 1'bX;
end 
// expected ASK_OUT[ 5 ]
initial
begin
	ASK_OUT_expected[5] = 1'bX;
end 
// expected ASK_OUT[ 4 ]
initial
begin
	ASK_OUT_expected[4] = 1'bX;
end 
// expected ASK_OUT[ 3 ]
initial
begin
	ASK_OUT_expected[3] = 1'bX;
end 
// expected ASK_OUT[ 2 ]
initial
begin
	ASK_OUT_expected[2] = 1'bX;
end 
// expected ASK_OUT[ 1 ]
initial
begin
	ASK_OUT_expected[1] = 1'bX;
end 
// expected ASK_OUT[ 0 ]
initial
begin
	ASK_OUT_expected[0] = 1'bX;
end 
// expected LUT_OUT[ 7 ]
initial
begin
	LUT_OUT_expected[7] = 1'bX;
end 
// expected LUT_OUT[ 6 ]
initial
begin
	LUT_OUT_expected[6] = 1'bX;
end 
// expected LUT_OUT[ 5 ]
initial
begin
	LUT_OUT_expected[5] = 1'bX;
end 
// expected LUT_OUT[ 4 ]
initial
begin
	LUT_OUT_expected[4] = 1'bX;
end 
// expected LUT_OUT[ 3 ]
initial
begin
	LUT_OUT_expected[3] = 1'bX;
end 
// expected LUT_OUT[ 2 ]
initial
begin
	LUT_OUT_expected[2] = 1'bX;
end 
// expected LUT_OUT[ 1 ]
initial
begin
	LUT_OUT_expected[1] = 1'bX;
end 
// expected LUT_OUT[ 0 ]
initial
begin
	LUT_OUT_expected[0] = 1'bX;
end 
// generate trigger
always @(ASK_OUT_expected or ASK_OUT or LFSR_BUS_expected or LFSR_BUS or LFSR_OUTPUT_expected or LFSR_OUTPUT or LUT_OUT_expected or LUT_OUT or PA_out_expected or PA_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ASK_OUT = %b | expected LFSR_BUS = %b | expected LFSR_OUTPUT = %b | expected LUT_OUT = %b | expected PA_out = %b | ",ASK_OUT_expected_prev,LFSR_BUS_expected_prev,LFSR_OUTPUT_expected_prev,LUT_OUT_expected_prev,PA_out_expected_prev);
	$display("| real ASK_OUT = %b | real LFSR_BUS = %b | real LFSR_OUTPUT = %b | real LUT_OUT = %b | real PA_out = %b | ",ASK_OUT_prev,LFSR_BUS_prev,LFSR_OUTPUT_prev,LUT_OUT_prev,PA_out_prev);
`endif
	if (
		( ASK_OUT_expected_prev[0] !== 1'bx ) && ( ASK_OUT_prev[0] !== ASK_OUT_expected_prev[0] )
		&& ((ASK_OUT_expected_prev[0] !== last_ASK_OUT_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ASK_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ASK_OUT_expected_prev);
		$display ("     Real value = %b", ASK_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ASK_OUT_exp[0] = ASK_OUT_expected_prev[0];
	end
	if (
		( ASK_OUT_expected_prev[1] !== 1'bx ) && ( ASK_OUT_prev[1] !== ASK_OUT_expected_prev[1] )
		&& ((ASK_OUT_expected_prev[1] !== last_ASK_OUT_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ASK_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ASK_OUT_expected_prev);
		$display ("     Real value = %b", ASK_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ASK_OUT_exp[1] = ASK_OUT_expected_prev[1];
	end
	if (
		( ASK_OUT_expected_prev[2] !== 1'bx ) && ( ASK_OUT_prev[2] !== ASK_OUT_expected_prev[2] )
		&& ((ASK_OUT_expected_prev[2] !== last_ASK_OUT_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ASK_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ASK_OUT_expected_prev);
		$display ("     Real value = %b", ASK_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ASK_OUT_exp[2] = ASK_OUT_expected_prev[2];
	end
	if (
		( ASK_OUT_expected_prev[3] !== 1'bx ) && ( ASK_OUT_prev[3] !== ASK_OUT_expected_prev[3] )
		&& ((ASK_OUT_expected_prev[3] !== last_ASK_OUT_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ASK_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ASK_OUT_expected_prev);
		$display ("     Real value = %b", ASK_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ASK_OUT_exp[3] = ASK_OUT_expected_prev[3];
	end
	if (
		( ASK_OUT_expected_prev[4] !== 1'bx ) && ( ASK_OUT_prev[4] !== ASK_OUT_expected_prev[4] )
		&& ((ASK_OUT_expected_prev[4] !== last_ASK_OUT_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ASK_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ASK_OUT_expected_prev);
		$display ("     Real value = %b", ASK_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ASK_OUT_exp[4] = ASK_OUT_expected_prev[4];
	end
	if (
		( ASK_OUT_expected_prev[5] !== 1'bx ) && ( ASK_OUT_prev[5] !== ASK_OUT_expected_prev[5] )
		&& ((ASK_OUT_expected_prev[5] !== last_ASK_OUT_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ASK_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ASK_OUT_expected_prev);
		$display ("     Real value = %b", ASK_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ASK_OUT_exp[5] = ASK_OUT_expected_prev[5];
	end
	if (
		( ASK_OUT_expected_prev[6] !== 1'bx ) && ( ASK_OUT_prev[6] !== ASK_OUT_expected_prev[6] )
		&& ((ASK_OUT_expected_prev[6] !== last_ASK_OUT_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ASK_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ASK_OUT_expected_prev);
		$display ("     Real value = %b", ASK_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ASK_OUT_exp[6] = ASK_OUT_expected_prev[6];
	end
	if (
		( ASK_OUT_expected_prev[7] !== 1'bx ) && ( ASK_OUT_prev[7] !== ASK_OUT_expected_prev[7] )
		&& ((ASK_OUT_expected_prev[7] !== last_ASK_OUT_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ASK_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ASK_OUT_expected_prev);
		$display ("     Real value = %b", ASK_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ASK_OUT_exp[7] = ASK_OUT_expected_prev[7];
	end
	if (
		( LUT_OUT_expected_prev[0] !== 1'bx ) && ( LUT_OUT_prev[0] !== LUT_OUT_expected_prev[0] )
		&& ((LUT_OUT_expected_prev[0] !== last_LUT_OUT_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LUT_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LUT_OUT_expected_prev);
		$display ("     Real value = %b", LUT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LUT_OUT_exp[0] = LUT_OUT_expected_prev[0];
	end
	if (
		( LUT_OUT_expected_prev[1] !== 1'bx ) && ( LUT_OUT_prev[1] !== LUT_OUT_expected_prev[1] )
		&& ((LUT_OUT_expected_prev[1] !== last_LUT_OUT_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LUT_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LUT_OUT_expected_prev);
		$display ("     Real value = %b", LUT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LUT_OUT_exp[1] = LUT_OUT_expected_prev[1];
	end
	if (
		( LUT_OUT_expected_prev[2] !== 1'bx ) && ( LUT_OUT_prev[2] !== LUT_OUT_expected_prev[2] )
		&& ((LUT_OUT_expected_prev[2] !== last_LUT_OUT_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LUT_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LUT_OUT_expected_prev);
		$display ("     Real value = %b", LUT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LUT_OUT_exp[2] = LUT_OUT_expected_prev[2];
	end
	if (
		( LUT_OUT_expected_prev[3] !== 1'bx ) && ( LUT_OUT_prev[3] !== LUT_OUT_expected_prev[3] )
		&& ((LUT_OUT_expected_prev[3] !== last_LUT_OUT_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LUT_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LUT_OUT_expected_prev);
		$display ("     Real value = %b", LUT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LUT_OUT_exp[3] = LUT_OUT_expected_prev[3];
	end
	if (
		( LUT_OUT_expected_prev[4] !== 1'bx ) && ( LUT_OUT_prev[4] !== LUT_OUT_expected_prev[4] )
		&& ((LUT_OUT_expected_prev[4] !== last_LUT_OUT_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LUT_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LUT_OUT_expected_prev);
		$display ("     Real value = %b", LUT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LUT_OUT_exp[4] = LUT_OUT_expected_prev[4];
	end
	if (
		( LUT_OUT_expected_prev[5] !== 1'bx ) && ( LUT_OUT_prev[5] !== LUT_OUT_expected_prev[5] )
		&& ((LUT_OUT_expected_prev[5] !== last_LUT_OUT_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LUT_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LUT_OUT_expected_prev);
		$display ("     Real value = %b", LUT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LUT_OUT_exp[5] = LUT_OUT_expected_prev[5];
	end
	if (
		( LUT_OUT_expected_prev[6] !== 1'bx ) && ( LUT_OUT_prev[6] !== LUT_OUT_expected_prev[6] )
		&& ((LUT_OUT_expected_prev[6] !== last_LUT_OUT_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LUT_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LUT_OUT_expected_prev);
		$display ("     Real value = %b", LUT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LUT_OUT_exp[6] = LUT_OUT_expected_prev[6];
	end
	if (
		( LUT_OUT_expected_prev[7] !== 1'bx ) && ( LUT_OUT_prev[7] !== LUT_OUT_expected_prev[7] )
		&& ((LUT_OUT_expected_prev[7] !== last_LUT_OUT_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LUT_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LUT_OUT_expected_prev);
		$display ("     Real value = %b", LUT_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LUT_OUT_exp[7] = LUT_OUT_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#30000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module DSS_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clkin;
reg [4:0] data_port_A;
// wires                                               
wire [7:0] ASK_OUT;
wire [8:0] LFSR_BUS;
wire LFSR_OUTPUT;
wire [7:0] LUT_OUT;
wire [4:0] PA_out;

wire sampler;                             

// assign statements (if any)                          
DSS i1 (
// port map - connection between master ports and signals/registers   
	.ASK_OUT(ASK_OUT),
	.clkin(clkin),
	.data_port_A(data_port_A),
	.LFSR_BUS(LFSR_BUS),
	.LFSR_OUTPUT(LFSR_OUTPUT),
	.LUT_OUT(LUT_OUT),
	.PA_out(PA_out)
);

// clkin
always
begin
	clkin = 1'b0;
	clkin = #1000 1'b1;
	#1000;
end 
// data_port_A[ 4 ]
initial
begin
	data_port_A[4] = 1'b0;
end 
// data_port_A[ 3 ]
initial
begin
	data_port_A[3] = 1'b0;
end 
// data_port_A[ 2 ]
initial
begin
	data_port_A[2] = 1'b0;
end 
// data_port_A[ 1 ]
initial
begin
	data_port_A[1] = 1'b1;
end 
// data_port_A[ 0 ]
initial
begin
	data_port_A[0] = 1'b0;
end 

DSS_vlg_sample_tst tb_sample (
	.clkin(clkin),
	.data_port_A(data_port_A),
	.sampler_tx(sampler)
);

DSS_vlg_check_tst tb_out(
	.ASK_OUT(ASK_OUT),
	.LFSR_BUS(LFSR_BUS),
	.LFSR_OUTPUT(LFSR_OUTPUT),
	.LUT_OUT(LUT_OUT),
	.PA_out(PA_out),
	.sampler_rx(sampler)
);
endmodule

