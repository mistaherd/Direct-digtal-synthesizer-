LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

LIBRARY lpm;
USE lpm.lpm_components.all;
ENTITY DSS IS
	PORT
	(
		data_port_A	:	IN		STD_LOGIC_VECTOR(4 downto 0);
		--data_port_B	:	IN		STD_LOGIC_VECTOR(4 downto 0);
		clkin			:	IN		STD_LOGIC;
		--FSK_OUT		:	OUT STD_LOGIC_VECTOR(7 downto 0)
		ASK_OUT		: 	OUT	STD_LOGIC_VECTOR(7 downto 0);
		--PA				:	OUT 	STD_LOGIC_VECTOR(4 downto 0);
		LUT_OUT		:	OUT	STD_LOGIC_VECTOR(7 downto 0)
	);
END ENTITY DSS;	
ARCHITECTURE mycomp OF DSS IS
	COMPONENT LPMROM is
	  PORT (
				address :	in		std_logic_vector(4 downto 0);  -- Adjust address width as needed
				clock   :	in		std_logic;
				q       :	out	std_logic_vector(7 downto 0)  -- Adjust data width as needed
				);
	end COMPONENT;
	COMPONENT  LFSR is
		PORT (
					clock		:	IN		STD_LOGIC;
					dataout	: 	OUT	STD_LOGIC
				);
	end COMPONENT ;
	COMPONENT PhaseAccumulator is
	PORT (
				FSW		:	IN		STD_LOGIC_VECTOR(4 downto 0);
				clock		:	IN		STD_LOGIC;
				PA_out	: 	OUT	STD_LOGIC_VECTOR(4 downto 0)
			);
	end COMPONENT;

	COMPONENT mux is
		PORT
		(
			data_port0	:	In STD_LOGIC_VECTOR(7 downto 0);
			sel			:	In STD_LOGIC;
			data_port1	:	In STD_LOGIC_VECTOR(7 downto 0);
			out_port		:	OUT STD_LOGIC_VECTOR(7 downto 0)
		);
	end COMPONENT;
	SIGNAL out_lfsr0	:	STD_LOGIC;
	SIGNAL clk_lfsrin	:	STD_LOGIC_VECTOR(7 downto 0);
	SIGNAL out_PA		:	STD_LOGIC_VECTOR(4 downto 0);
	SIGNAL ROM_OUT 	:	STD_LOGIC_VECTOR(7 downto 0);
	
	BEGIN 
		
		mypa	:	PhaseAccumulator
		PORT MAP(
						FSW		=>	data_port_A,
						clock		=>	clkin,
						PA_out	=>	out_PA
					);
	
		--PA<=out_PA;
		MyROM : LPMROM
		PORT MAP(
						address	=>	out_PA,
						clock		=>	clkin,
						q			=>	ROM_OUT
					);
			
		LUT_OUT<=ROM_OUT;
		-- clock divider
		counter: LPM_COUNTER
		GENERIC MAP(
							LPM_WIDTH	=>	8	
						)
		PORT MAP(
						clock	=>	clkin,
						q		=>	clk_lfsrin
					);
		ASK_LFSR	: LFSR
		PORT MAP(
						--clock		=>	clkin,
						clock		=>	clk_lfsrin(1),
						dataout	=>	out_lfsr0
					);
		ASK_MUX	:MUX
		PORT MAP(
						data_port0	=>	ROM_OUT,
						sel			=>	out_lfsr0,
						data_port1	=> "00000000",
						out_port		=>	ASK_OUT
					);
		--ASK_OUT<=ROM_OUT when out_lfsr0='1'else"00000000";
END mycomp;
 